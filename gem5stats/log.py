#!/usr/bin/env python
#
# Copyright (c) 2013 Andreas Sandberg
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Andreas Sandberg

import sys
import re

_re_empty = re.compile("^\s*$")
_re_dump_begin = re.compile("^---------- Begin Simulation Statistics ----------$")
_re_dump_end = re.compile("^---------- End Simulation Statistics   ----------$")
                            


class StatError(Exception):
    """Base class for exceptions generated by the gem5stats module."""
    pass

class StatFormatError(StatError):
    """The stat.txt file is invalid.

    Attributes:
        line -- Failing text from stats file.
        msg  -- Explanation of the error
    """

    def __init__(self, line, msg):
        self.line = line
        self.msg = msg

    def __str__(self):
        return """Failed to read stats file:
  Failed on: "%s"
  %s""" % (self.line, self.msg)


class StatDump(object):
    """Class representing one dump of gem5's statistics.

    This class contains support routines for loading a block of gem5
    statistics. Entries are stored in an internal
    dictionary. Statistics entries that contain a vector of values are
    represented as tuples.

    Attributes:
      data -- Dictionary between stat keys and values.
    """

    _re_line = re.compile("^(?P<key>[^- ]\S*) +(?P<values>[^#]+)(?P<comment>#.*)?$")

    def __init__(self, log):
        """Load a statistics block from a file.

        Arguments:
          log -- File-like object to read from.
        """

        self.data = {}

        for l in log:
            if _re_empty.match(l):
                continue
            if not self._read_line(l):
                if not _re_dump_end.match(l):
                    raise StatFormatError(
                        l[:-1],
                        "Expected end of simulation statistics.")
                else:
                    break

    def _read_line(self, line):
        """Read one line of statistics and store the results in the
        data member. Returns True if a line was matched, False
        otherwise.

        Arguments:
          line -- String representing the line to parse.

        """
        match = self._re_line.match(line)
        if not match:
            return False

        key = match.group("key")
        values = match.group("values").split()
        self.data[key] = values[0] if len(values) == 1 else tuple(values)
        return True

    def __getitem__(self, key):
        return self.data[key]

    def get(self, key, default=None):
        """Return one statistics entry from the dump.

        The default behavior is to 

        Arguments:
          key -- Key to look up.

        Keyword Arguments:
          default -- Default value if not found. Raises KeyError if not set.
        """

        try:
            return self[key]
        except KeyError:
            if default == None:
                raise
            else:
                return default

    def get_long(self, *args, **kwargs):
        return long(self.get(*args, **kwargs))

    def get_float(self, *args, **kwargs):
        return float(self.get(*args, **kwargs))

def stream_log(log):
    """Generate a stream of StatDumps from a log file.

    Arguments:
      log -- File-like object representing the stats file.

    Exceptions:
      StatFormatError -- Raised if the input file is can not be parsed.
    """

    for l in log:
        if _re_empty.match(l):
            continue
        elif _re_dump_begin.match(l):
            dump = StatDump(log)
            yield dump
        else:
            raise StatFormatError(
                l[:-1],
                "Unexpected data in file. Expected a simulation "
                "statistics block.")

if __name__ == "__main__":
    for dump in stream_log(open(sys.argv[1], "r")):
        ticks = dump.get_long("sim_ticks")

        print "Ticks: %i" % ticks
